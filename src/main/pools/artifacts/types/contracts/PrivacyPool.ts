/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PrivacyPool {
  export type WithdrawalProofStruct = {
    accessType: BigNumberish;
    bitLength: BigNumberish;
    subsetData: BytesLike;
    flatProof: BigNumberish[];
    root: BytesLike;
    subsetRoot: BytesLike;
    nullifier: BytesLike;
    recipient: AddressLike;
    refund: BigNumberish;
    relayer: AddressLike;
    fee: BigNumberish;
    deadline: BigNumberish;
  };

  export type WithdrawalProofStructOutput = [
    accessType: bigint,
    bitLength: bigint,
    subsetData: string,
    flatProof: bigint[],
    root: string,
    subsetRoot: string,
    nullifier: string,
    recipient: string,
    refund: bigint,
    relayer: string,
    fee: bigint,
    deadline: bigint
  ] & {
    accessType: bigint;
    bitLength: bigint;
    subsetData: string;
    flatProof: bigint[];
    root: string;
    subsetRoot: string;
    nullifier: string;
    recipient: string;
    refund: bigint;
    relayer: string;
    fee: bigint;
    deadline: bigint;
  };

  export type WithdrawalRequestStruct = {
    proof: PrivacyPool.WithdrawalProofStruct;
    feeReceiver: AddressLike;
  };

  export type WithdrawalRequestStructOutput = [
    proof: PrivacyPool.WithdrawalProofStructOutput,
    feeReceiver: string
  ] & { proof: PrivacyPool.WithdrawalProofStructOutput; feeReceiver: string };
}

export interface PrivacyPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LEVELS"
      | "NATIVE"
      | "ROOTS_CAPACITY"
      | "asset"
      | "assetMetadata"
      | "currentLeafIndex"
      | "denomination"
      | "deposit"
      | "depositMany"
      | "filledSubtrees"
      | "getLatestRoot"
      | "hasher"
      | "isKnownRoot"
      | "nullifiers"
      | "roots"
      | "verifyWithdrawal"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Deposit" | "Withdrawal"): EventFragment;

  encodeFunctionData(functionFragment: "LEVELS", values?: undefined): string;
  encodeFunctionData(functionFragment: "NATIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROOTS_CAPACITY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentLeafIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "denomination",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "depositMany",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtrees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isKnownRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "roots", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "verifyWithdrawal",
    values: [PrivacyPool.WithdrawalProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PrivacyPool.WithdrawalRequestStruct]
  ): string;

  decodeFunctionResult(functionFragment: "LEVELS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NATIVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROOTS_CAPACITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLeafIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "denomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositMany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtrees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isKnownRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    commitment: BytesLike,
    leaf: BytesLike,
    asset: AddressLike,
    denomination: BigNumberish,
    leafIndex: BigNumberish
  ];
  export type OutputTuple = [
    commitment: string,
    leaf: string,
    asset: string,
    denomination: bigint,
    leafIndex: bigint
  ];
  export interface OutputObject {
    commitment: string;
    leaf: string;
    asset: string;
    denomination: bigint;
    leafIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    recipient: AddressLike,
    relayer: AddressLike,
    subsetRoot: BytesLike,
    nullifier: BytesLike,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    relayer: string,
    subsetRoot: string,
    nullifier: string,
    fee: bigint
  ];
  export interface OutputObject {
    recipient: string;
    relayer: string;
    subsetRoot: string;
    nullifier: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivacyPool extends BaseContract {
  connect(runner?: ContractRunner | null): PrivacyPool;
  waitForDeployment(): Promise<this>;

  interface: PrivacyPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LEVELS: TypedContractMethod<[], [bigint], "view">;

  NATIVE: TypedContractMethod<[], [string], "view">;

  ROOTS_CAPACITY: TypedContractMethod<[], [bigint], "view">;

  asset: TypedContractMethod<[], [string], "view">;

  assetMetadata: TypedContractMethod<[], [string], "view">;

  currentLeafIndex: TypedContractMethod<[], [bigint], "view">;

  denomination: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<[commitment: BytesLike], [bigint], "payable">;

  depositMany: TypedContractMethod<
    [inputs: BytesLike[]],
    [bigint[]],
    "payable"
  >;

  filledSubtrees: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getLatestRoot: TypedContractMethod<[], [string], "view">;

  hasher: TypedContractMethod<[], [string], "view">;

  isKnownRoot: TypedContractMethod<[root: BytesLike], [boolean], "view">;

  nullifiers: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  roots: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  verifyWithdrawal: TypedContractMethod<
    [proof: PrivacyPool.WithdrawalProofStruct],
    [void],
    "view"
  >;

  withdraw: TypedContractMethod<
    [withdrawRequest: PrivacyPool.WithdrawalRequestStruct],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LEVELS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NATIVE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROOTS_CAPACITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetMetadata"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentLeafIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "denomination"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[commitment: BytesLike], [bigint], "payable">;
  getFunction(
    nameOrSignature: "depositMany"
  ): TypedContractMethod<[inputs: BytesLike[]], [bigint[]], "payable">;
  getFunction(
    nameOrSignature: "filledSubtrees"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLatestRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isKnownRoot"
  ): TypedContractMethod<[root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nullifiers"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "roots"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verifyWithdrawal"
  ): TypedContractMethod<
    [proof: PrivacyPool.WithdrawalProofStruct],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [withdrawRequest: PrivacyPool.WithdrawalRequestStruct],
    [void],
    "payable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "Deposit(bytes32,bytes32,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Withdrawal(address,address,bytes32,bytes32,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
