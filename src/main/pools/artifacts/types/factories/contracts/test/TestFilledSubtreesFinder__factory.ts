/* Autogenerated file. Do not edit manually. */
/* tslint:disable */

import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers'
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers'
import type { NonPayableOverrides } from '../../../common'
import type {
  TestFilledSubtreesFinder,
  TestFilledSubtreesFinderInterface,
} from '../../../contracts/test/TestFilledSubtreesFinder'

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'elementIndex',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'layerIndex',
        type: 'uint256',
      },
    ],
    name: 'getFilledSubtreeIndex',
    outputs: [
      {
        internalType: 'uint256',
        name: 'filledSubtreeIndex',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'elementIndex',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'layerIndex',
        type: 'uint256',
      },
    ],
    name: 'getFilledSubtreeIndexGasEstimate',
    outputs: [
      {
        internalType: 'uint256',
        name: 'filledSubtreeIndex',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
] as const

const _bytecode =
  '0x608060405234801561001057600080fd5b50610108806100206000396000f3fe60806040526004361060265760003560e01c80630650380b14602b5780635657394f14604c575b600080fd5b603a60363660046082565b6063565b60405190815260200160405180910390f35b348015605757600080fd5b50603a60363660046082565b600060018083011b8381607657607660a3565b04600202905092915050565b60008060408385031215609457600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220d90c54e397b471de95658422e96dbbd10936b20fd94f9ebbacfe2bc43513c39364736f6c63430008180033'

type TestFilledSubtreesFinderConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: TestFilledSubtreesFinderConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class TestFilledSubtreesFinder__factory extends ContractFactory {
  constructor(...args: TestFilledSubtreesFinderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {})
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestFilledSubtreesFinder & {
        deploymentTransaction(): ContractTransactionResponse
      }
    >
  }
  override connect(runner: ContractRunner | null): TestFilledSubtreesFinder__factory {
    return super.connect(runner) as TestFilledSubtreesFinder__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): TestFilledSubtreesFinderInterface {
    return new Interface(_abi) as TestFilledSubtreesFinderInterface
  }
  static connect(address: string, runner?: ContractRunner | null): TestFilledSubtreesFinder {
    return new Contract(address, _abi, runner) as unknown as TestFilledSubtreesFinder
  }
}
